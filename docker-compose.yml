version: '3'
#volume単体で定義するとそれだけで保存することになるので、永続性が出る
#そしてこれを複数のコンテナで共有することができる
#webサーバーとアプリサーバーが、unixドメインのやりとりをするために
#共通のファイルを持っていなければいけないのでこのような形になった?
#参考：https://qiita.com/kotarella1110/items/634f6fafeb33ae0f51dc
#https://qiita.com/kuni-nakaji/items/d11219e4ad7c74ece748

#volumeのメリット
#volumeに書かれた内容はコンテナが消えても残してくれていて
#新しいコンテナが立ち上がった時に、前消された時の内容を反映してくれる
#つまりnginxとphp-fpmの/var/run/php-fpmはimageに保存され
#dbの/var/lib/mysqlもimagesに保存されるため、コンテナが消えてもデータはある状態になる。
#保存場所はimageではなく、そのpcのどこか
#deviceと指定して保存する場所を指定できる
#https://qiita.com/reflet/items/5c0a488494c7d6904084
#またdocker volume inspectでlocalでのvolumeの保存場所がわかる
#https://note.com/w0o0ps/n/n9bc1bcd9fa59
volumes:
  php-fpm-socket:
  db-store:
services:
  web:
      build:
        context: .
        dockerfile: ./containers/nginx/Dockerfile
      ports:
          - "23450:80"
      depends_on:
          - php
      volumes:
        - php-fpm-socket:/var/run/php-fpm
      networks:
        - back-tier
  php:
      build:
        context: .
        dockerfile: ./containers/php/Dockerfile
      volumes:
        - php-fpm-socket:/var/run/php-fpm
      environment:
      - DB_CONNECTION=mysql
      - DB_HOST=db
      - DB_PORT=3306
      - DB_DATABASE=${DB_NAME:-laravel_local}
      - DB_USERNAME=${DB_USER:-phper}
      - DB_PASSWORD=${DB_PASS:-secret}
      networks:
        - back-tier
  nuxt:
      #Cannot find module '../package.json'と表示されればnode_moduleを一旦削除
      #https://qiita.com/Safire/items/2fe4587769e763782dcd
      build:
        context: .
        dockerfile: ./containers/nuxt/Dockerfile
      tty: true
      command: npm run dev
      #npm run devは開発用であるので開発中は上記のコマンドはコメントインしておく
      #docker hubにpushをするimageを作成するときは上記command: sh -c "npm install && npm run dev"をコメントアウトする
      #またnuxtのdockerfileでCMD  npm run startをコメントインする
      #詳しくはnuxtのdockerfileに記述
      environment:
      - NODE_ENV=development
      #apiのurlを環境ごとに変えるために上の環境変数を作成、本番の場合はNODE_ENV=eksに変える
      ports:
        - 80:80
      networks:
        - front-tier
  db:
    build:
      context: .
      dockerfile: ./containers/mysql/Dockerfile
    ports:
      - ${DB_PORT:-3306}:3306
    volumes:
      - db-store:/var/lib/mysql
    environment:
      - MYSQL_DATABASE=${DB_NAME:-laravel_local}
      - MYSQL_USER=${DB_USER:-phper}
      - MYSQL_PASSWORD=${DB_PASS:-secret}
      - MYSQL_ROOT_PASSWORD=${DB_PASS:-secret}
    networks:
      - back-tier

networks:
  front-tier:
    driver: bridge
  back-tier:
    driver: bridge